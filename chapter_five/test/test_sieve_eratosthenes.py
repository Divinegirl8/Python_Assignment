from unittest import TestCase
from chapter_five.sieve_eratosthenes import *


class Test(TestCase):
    def test_prime_number(self):
        self.assertTrue(prime_numbers(2))

    def test_not_prime_number(self):
        self.assertEqual(24, prime_numbers(24))

    def test_prime_list(self):
        result = [1, True, True, 4, True, 6, True, 8, 9, 10, True, 12, True, 14, 15, 16, True, 18, True, 20, 21, 22,
                  True, 24, 25, 26, 27, 28, True, 30, True, 32, 33, 34, 35, 36, True, 38, 39, 40, True, 42, True, 44,
                  45, 46, True, 48, 49, 50, 51, 52, True, 54, 55, 56, 57, 58, True, 60, True, 62, 63, 64, 65, 66, True,
                  68, 69, 70, True, 72, True, 74, 75, 76, 77, 78, True, 80, 81, 82, True, 84, 85, 86, 87, 88, True, 90,
                  91, 92, 93, 94, 95, 96, True, 98, 99, 100, True, 102, True, 104, 105, 106, True, 108, True, 110, 111,
                  112, True, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, True, 128, 129, 130, True,
                  132, 133, 134, 135, 136, True, 138, True, 140, 141, 142, 143, 144, 145, 146, 147, 148, True, 150,
                  True, 152, 153, 154, 155, 156, True, 158, 159, 160, 161, 162, True, 164, 165, 166, True, 168, 169,
                  170, 171, 172, True, 174, 175, 176, 177, 178, True, 180, True, 182, 183, 184, 185, 186, 187, 188, 189,
                  190, True, 192, True, 194, 195, 196, True, 198, True, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                  209, 210, True, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, True, 224, 225, 226, True, 228,
                  True, 230, 231, 232, True, 234, 235, 236, 237, 238, True, 240, True, 242, 243, 244, 245, 246, 247,
                  248, 249, 250, True, 252, 253, 254, 255, 256, True, 258, 259, 260, 261, 262, True, 264, 265, 266, 267,
                  268, True, 270, True, 272, 273, 274, 275, 276, True, 278, 279, 280, True, 282, True, 284, 285, 286,
                  287, 288, 289, 290, 291, 292, True, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
                  True, 308, 309, 310, True, 312, True, 314, 315, 316, True, 318, 319, 320, 321, 322, 323, 324, 325,
                  326, 327, 328, 329, 330, True, 332, 333, 334, 335, 336, True, 338, 339, 340, 341, 342, 343, 344, 345,
                  346, True, 348, True, 350, 351, 352, True, 354, 355, 356, 357, 358, True, 360, 361, 362, 363, 364,
                  365, 366, True, 368, 369, 370, 371, 372, True, 374, 375, 376, 377, 378, True, 380, 381, 382, True,
                  384, 385, 386, 387, 388, True, 390, 391, 392, 393, 394, 395, 396, True, 398, 399, 400, True, 402, 403,
                  404, 405, 406, 407, 408, True, 410, 411, 412, 413, 414, 415, 416, 417, 418, True, 420, True, 422, 423,
                  424, 425, 426, 427, 428, 429, 430, True, 432, True, 434, 435, 436, 437, 438, True, 440, 441, 442,
                  True, 444, 445, 446, 447, 448, True, 450, 451, 452, 453, 454, 455, 456, True, 458, 459, 460, True,
                  462, True, 464, 465, 466, True, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, True, 480, 481,
                  482, 483, 484, 485, 486, True, 488, 489, 490, True, 492, 493, 494, 495, 496, 497, 498, True, 500, 501,
                  502, True, 504, 505, 506, 507, 508, True, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, True,
                  522, True, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, True,
                  542, 543, 544, 545, 546, True, 548, 549, 550, 551, 552, 553, 554, 555, 556, True, 558, 559, 560, 561,
                  562, True, 564, 565, 566, 567, 568, True, 570, True, 572, 573, 574, 575, 576, True, 578, 579, 580,
                  581, 582, 583, 584, 585, 586, True, 588, 589, 590, 591, 592, True, 594, 595, 596, 597, 598, True, 600,
                  True, 602, 603, 604, 605, 606, True, 608, 609, 610, 611, 612, True, 614, 615, 616, True, 618, True,
                  620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, True, 632, 633, 634, 635, 636, 637, 638, 639,
                  640, True, 642, True, 644, 645, 646, True, 648, 649, 650, 651, 652, True, 654, 655, 656, 657, 658,
                  True, 660, True, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, True, 674, 675, 676, True,
                  678, 679, 680, 681, 682, True, 684, 685, 686, 687, 688, 689, 690, True, 692, 693, 694, 695, 696, 697,
                  698, 699, 700, True, 702, 703, 704, 705, 706, 707, 708, True, 710, 711, 712, 713, 714, 715, 716, 717,
                  718, True, 720, 721, 722, 723, 724, 725, 726, True, 728, 729, 730, 731, 732, True, 734, 735, 736, 737,
                  738, True, 740, 741, 742, True, 744, 745, 746, 747, 748, 749, 750, True, 752, 753, 754, 755, 756,
                  True, 758, 759, 760, True, 762, 763, 764, 765, 766, 767, 768, True, 770, 771, 772, True, 774, 775,
                  776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, True, 788, 789, 790, 791, 792, 793, 794, 795,
                  796, True, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, True, 810, True, 812, 813, 814, 815,
                  816, 817, 818, 819, 820, True, 822, True, 824, 825, 826, True, 828, True, 830, 831, 832, 833, 834,
                  835, 836, 837, 838, True, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, True, 854,
                  855, 856, True, 858, True, 860, 861, 862, True, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
                  875, 876, True, 878, 879, 880, True, 882, True, 884, 885, 886, True, 888, 889, 890, 891, 892, 893,
                  894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, True, 908, 909, 910, True, 912, 913,
                  914, 915, 916, 917, 918, True, 920, 921, 922, 923, 924, 925, 926, 927, 928, True, 930, 931, 932, 933,
                  934, 935, 936, True, 938, 939, 940, True, 942, 943, 944, 945, 946, True, 948, 949, 950, 951, 952,
                  True, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, True, 968, 969, 970, True, 972,
                  973, 974, 975, 976, True, 978, 979, 980, 981, 982, True, 984, 985, 986, 987, 988, 989, 990, True, 992,
                  993, 994, 995, 996, True, 998, 999, 1000]
        numbers = list(range(1, 1001))
        self.assertEqual(result, create_prime_number_list(numbers))

    def test_divisible_by_two(self):
        numbers = list(range(1, 1001))
        result = [1, True, True, False, True, False, True, False, 9, False, True, False, True, False, 15, False, True,
                  False, True, False, 21, False, True, False, 25, False, 27, False, True, False, True, False, 33, False,
                  35, False, True, False, 39, False, True, False, True, False, 45, False, True, False, 49, False, 51,
                  False, True, False, 55, False, 57, False, True, False, True, False, 63, False, 65, False, True, False,
                  69, False, True, False, True, False, 75, False, 77, False, True, False, 81, False, True, False, 85,
                  False, 87, False, True, False, 91, False, 93, False, 95, False, True, False, 99, False, True, False,
                  True, False, 105, False, True, False, True, False, 111, False, True, False, 115, False, 117, False,
                  119, False, 121, False, 123, False, 125, False, True, False, 129, False, True, False, 133, False, 135,
                  False, True, False, True, False, 141, False, 143, False, 145, False, 147, False, True, False, True,
                  False, 153, False, 155, False, True, False, 159, False, 161, False, True, False, 165, False, True,
                  False, 169, False, 171, False, True, False, 175, False, 177, False, True, False, True, False, 183,
                  False, 185, False, 187, False, 189, False, True, False, True, False, 195, False, True, False, True,
                  False, 201, False, 203, False, 205, False, 207, False, 209, False, True, False, 213, False, 215,
                  False, 217, False, 219, False, 221, False, True, False, 225, False, True, False, True, False, 231,
                  False, True, False, 235, False, 237, False, True, False, True, False, 243, False, 245, False, 247,
                  False, 249, False, True, False, 253, False, 255, False, True, False, 259, False, 261, False, True,
                  False, 265, False, 267, False, True, False, True, False, 273, False, 275, False, True, False, 279,
                  False, True, False, True, False, 285, False, 287, False, 289, False, 291, False, True, False, 295,
                  False, 297, False, 299, False, 301, False, 303, False, 305, False, True, False, 309, False, True,
                  False, True, False, 315, False, True, False, 319, False, 321, False, 323, False, 325, False, 327,
                  False, 329, False, True, False, 333, False, 335, False, True, False, 339, False, 341, False, 343,
                  False, 345, False, True, False, True, False, 351, False, True, False, 355, False, 357, False, True,
                  False, 361, False, 363, False, 365, False, True, False, 369, False, 371, False, True, False, 375,
                  False, 377, False, True, False, 381, False, True, False, 385, False, 387, False, True, False, 391,
                  False, 393, False, 395, False, True, False, 399, False, True, False, 403, False, 405, False, 407,
                  False, True, False, 411, False, 413, False, 415, False, 417, False, True, False, True, False, 423,
                  False, 425, False, 427, False, 429, False, True, False, True, False, 435, False, 437, False, True,
                  False, 441, False, True, False, 445, False, 447, False, True, False, 451, False, 453, False, 455,
                  False, True, False, 459, False, True, False, True, False, 465, False, True, False, 469, False, 471,
                  False, 473, False, 475, False, 477, False, True, False, 481, False, 483, False, 485, False, True,
                  False, 489, False, True, False, 493, False, 495, False, 497, False, True, False, 501, False, True,
                  False, 505, False, 507, False, True, False, 511, False, 513, False, 515, False, 517, False, 519,
                  False, True, False, True, False, 525, False, 527, False, 529, False, 531, False, 533, False, 535,
                  False, 537, False, 539, False, True, False, 543, False, 545, False, True, False, 549, False, 551,
                  False, 553, False, 555, False, True, False, 559, False, 561, False, True, False, 565, False, 567,
                  False, True, False, True, False, 573, False, 575, False, True, False, 579, False, 581, False, 583,
                  False, 585, False, True, False, 589, False, 591, False, True, False, 595, False, 597, False, True,
                  False, True, False, 603, False, 605, False, True, False, 609, False, 611, False, True, False, 615,
                  False, True, False, True, False, 621, False, 623, False, 625, False, 627, False, 629, False, True,
                  False, 633, False, 635, False, 637, False, 639, False, True, False, True, False, 645, False, True,
                  False, 649, False, 651, False, True, False, 655, False, 657, False, True, False, True, False, 663,
                  False, 665, False, 667, False, 669, False, 671, False, True, False, 675, False, True, False, 679,
                  False, 681, False, True, False, 685, False, 687, False, 689, False, True, False, 693, False, 695,
                  False, 697, False, 699, False, True, False, 703, False, 705, False, 707, False, True, False, 711,
                  False, 713, False, 715, False, 717, False, True, False, 721, False, 723, False, 725, False, True,
                  False, 729, False, 731, False, True, False, 735, False, 737, False, True, False, 741, False, True,
                  False, 745, False, 747, False, 749, False, True, False, 753, False, 755, False, True, False, 759,
                  False, True, False, 763, False, 765, False, 767, False, True, False, 771, False, True, False, 775,
                  False, 777, False, 779, False, 781, False, 783, False, 785, False, True, False, 789, False, 791,
                  False, 793, False, 795, False, True, False, 799, False, 801, False, 803, False, 805, False, 807,
                  False, True, False, True, False, 813, False, 815, False, 817, False, 819, False, True, False, True,
                  False, 825, False, True, False, True, False, 831, False, 833, False, 835, False, 837, False, True,
                  False, 841, False, 843, False, 845, False, 847, False, 849, False, 851, False, True, False, 855,
                  False, True, False, True, False, 861, False, True, False, 865, False, 867, False, 869, False, 871,
                  False, 873, False, 875, False, True, False, 879, False, True, False, True, False, 885, False, True,
                  False, 889, False, 891, False, 893, False, 895, False, 897, False, 899, False, 901, False, 903, False,
                  905, False, True, False, 909, False, True, False, 913, False, 915, False, 917, False, True, False,
                  921, False, 923, False, 925, False, 927, False, True, False, 931, False, 933, False, 935, False, True,
                  False, 939, False, True, False, 943, False, 945, False, True, False, 949, False, 951, False, True,
                  False, 955, False, 957, False, 959, False, 961, False, 963, False, 965, False, True, False, 969,
                  False, True, False, 973, False, 975, False, True, False, 979, False, 981, False, True, False, 985,
                  False, 987, False, 989, False, True, False, 993, False, 995, False, True, False, 999, False]
        self.assertEqual(result, set_multiples_of_index_2_as_false(create_prime_number_list(numbers)))

    def test_setting_other_numbers_that_is_not_prime_to_false(self):
        numbers = list(range(1, 1001))

        result = [False, True, True, False, True, False, True, False, False, False, True, False, True, False, False,
                  False, True, False, True, False, False, False, True, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, True, False, False, False, True, False, True, False, False,
                  False, True, False, False, False, False, False, True, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, True, False, False, False, True, False, True, False, False,
                  False, False, False, True, False, False, False, True, False, False, False, False, False, True, False,
                  False, False, False, False, False, False, True, False, False, False, True, False, True, False, False,
                  False, True, False, True, False, False, False, True, False, False, False, False, False, False, False,
                  False, False, False, False, False, False, True, False, False, False, True, False, False, False, False,
                  False, True, False, True, False, False, False, False, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, True, False, False, False, False, False, True, False, False,
                  False, True, False, False, False, False, False, True, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, False, False, False, False, True, False, True, False, False,
                  False, True, False, True, False, False, False, False, False, False, False, False, False, False, False,
                  True, False, False, False, False, False, False, False, False, False, False, False, True, False, False,
                  False, True, False, True, False, False, False, True, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, False, False, False, False, True, False, False, False, False,
                  False, True, False, False, False, False, False, True, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, True, False, False, False, True, False, True, False, False,
                  False, False, False, False, False, False, False, True, False, False, False, False, False, False,
                  False, False, False, False, False, False, False, True, False, False, False, True, False, True, False,
                  False, False, True, False, False, False, False, False, False, False, False, False, False, False,
                  False, False, True, False, False, False, False, False, True, False, False, False, False, False, False,
                  False, False, False, True, False, True, False, False, False, True, False, False, False, False, False,
                  True, False, False, False, False, False, False, False, True, False, False, False, False, False, True,
                  False, False, False, False, False, True, False, False, False, True, False, False, False, False, False,
                  True, False, False, False, False, False, False, False, True, False, False, False, True, False, False,
                  False, False, False, False, False, True, False, False, False, False, False, False, False, False,
                  False, True, False, True, False, False, False, False, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, True, False, False, False, True, False, False, False, False,
                  False, True, False, False, False, False, False, False, False, True, False, False, False, True, False,
                  True, False, False, False, True, False, False, False, False, False, False, False, False, False, False,
                  False, True, False, False, False, False, False, False, False, True, False, False, False, True, False,
                  False, False, False, False, False, False, True, False, False, False, True, False, False, False, False,
                  False, True, False, False, False, False, False, False, False, False, False, False, False, True, False,
                  True, False, False, False, False, False, False, False, False, False, False, False, False, False,
                  False, False, False, False, True, False, False, False, False, False, True, False, False, False, False,
                  False, False, False, False, False, True, False, False, False, False, False, True, False, False, False,
                  False, False, True, False, True, False, False, False, False, False, True, False, False, False, False,
                  False, False, False, False, False, True, False, False, False, False, False, True, False, False, False,
                  False, False, True, False, True, False, False, False, False, False, True, False, False, False, False,
                  False, True, False, False, False, True, False, True, False, False, False, False, False, False, False,
                  False, False, False, False, True, False, False, False, False, False, False, False, False, False, True,
                  False, True, False, False, False, True, False, False, False, False, False, True, False, False, False,
                  False, False, True, False, True, False, False, False, False, False, False, False, False, False, False,
                  False, True, False, False, False, True, False, False, False, False, False, True, False, False, False,
                  False, False, False, False, True, False, False, False, False, False, False, False, False, False, True,
                  False, False, False, False, False, False, False, True, False, False, False, False, False, False,
                  False, False, False, True, False, False, False, False, False, False, False, True, False, False, False,
                  False, False, True, False, False, False, False, False, True, False, False, False, True, False, False,
                  False, False, False, False, False, True, False, False, False, False, False, True, False, False, False,
                  True, False, False, False, False, False, False, False, True, False, False, False, True, False, False,
                  False, False, False, False, False, False, False, False, False, False, False, True, False, False,
                  False, False, False, False, False, False, False, True, False, False, False, False, False, False,
                  False, False, False, False, False, True, False, True, False, False, False, False, False, False, False,
                  False, False, True, False, True, False, False, False, True, False, True, False, False, False, False,
                  False, False, False, False, False, True, False, False, False, False, False, False, False, False,
                  False, False, False, False, False, True, False, False, False, True, False, True, False, False, False,
                  True, False, False, False, False, False, False, False, False, False, False, False, False, False, True,
                  False, False, False, True, False, True, False, False, False, True, False, False, False, False, False,
                  False, False, False, False, False, False, False, False, False, False, False, False, False, False,
                  True, False, False, False, True, False, False, False, False, False, False, False, True, False, False,
                  False, False, False, False, False, False, False, True, False, False, False, False, False, False,
                  False, True, False, False, False, True, False, False, False, False, False, True, False, False, False,
                  False, False, True, False, False, False, False, False, False, False, False, False, False, False,
                  False, False, True, False, False, False, True, False, False, False, False, False, True, False, False,
                  False, False, False, True, False, False, False, False, False, False, False, True, False, False, False,
                  False, False, True, False, False, False]
        self.assertEqual(result, set_other_index_as_false(create_prime_number_list(numbers)))

    def test_all_prime_numbers(self):
        numbers = list(range(1, 1000))
        result = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
                  103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,
                  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
                  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
                  449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
                  587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
                  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839,
                  853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
                  991, 997]
        self.assertEqual(result,print_out_all_prime_numbers(set_other_index_as_false(create_prime_number_list(numbers))))
